// Code generated by MockGen. DO NOT EDIT.
// Source: microservices/auth/gen/auth_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=microservices/auth/gen/auth_grpc.pb.go -destination=microservices/auth/mock/mock_grpc.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	__auth_microservice "github.com/go-park-mail-ru/2024_2_VKatuny/microservices/auth/gen"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAuthorizationClient is a mock of AuthorizationClient interface.
type MockAuthorizationClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationClientMockRecorder
	isgomock struct{}
}

// MockAuthorizationClientMockRecorder is the mock recorder for MockAuthorizationClient.
type MockAuthorizationClientMockRecorder struct {
	mock *MockAuthorizationClient
}

// NewMockAuthorizationClient creates a new mock instance.
func NewMockAuthorizationClient(ctrl *gomock.Controller) *MockAuthorizationClient {
	mock := &MockAuthorizationClient{ctrl: ctrl}
	mock.recorder = &MockAuthorizationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationClient) EXPECT() *MockAuthorizationClientMockRecorder {
	return m.recorder
}

// AuthUser mocks base method.
func (m *MockAuthorizationClient) AuthUser(ctx context.Context, in *__auth_microservice.AuthRequest, opts ...grpc.CallOption) (*__auth_microservice.AuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthUser", varargs...)
	ret0, _ := ret[0].(*__auth_microservice.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthUser indicates an expected call of AuthUser.
func (mr *MockAuthorizationClientMockRecorder) AuthUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUser", reflect.TypeOf((*MockAuthorizationClient)(nil).AuthUser), varargs...)
}

// CheckAuth mocks base method.
func (m *MockAuthorizationClient) CheckAuth(ctx context.Context, in *__auth_microservice.CheckAuthRequest, opts ...grpc.CallOption) (*__auth_microservice.CheckAuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckAuth", varargs...)
	ret0, _ := ret[0].(*__auth_microservice.CheckAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuth indicates an expected call of CheckAuth.
func (mr *MockAuthorizationClientMockRecorder) CheckAuth(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuth", reflect.TypeOf((*MockAuthorizationClient)(nil).CheckAuth), varargs...)
}

// DeauthUser mocks base method.
func (m *MockAuthorizationClient) DeauthUser(ctx context.Context, in *__auth_microservice.DeauthRequest, opts ...grpc.CallOption) (*__auth_microservice.DeauthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeauthUser", varargs...)
	ret0, _ := ret[0].(*__auth_microservice.DeauthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeauthUser indicates an expected call of DeauthUser.
func (mr *MockAuthorizationClientMockRecorder) DeauthUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeauthUser", reflect.TypeOf((*MockAuthorizationClient)(nil).DeauthUser), varargs...)
}

// MockAuthorizationServer is a mock of AuthorizationServer interface.
type MockAuthorizationServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationServerMockRecorder
	isgomock struct{}
}

// MockAuthorizationServerMockRecorder is the mock recorder for MockAuthorizationServer.
type MockAuthorizationServerMockRecorder struct {
	mock *MockAuthorizationServer
}

// NewMockAuthorizationServer creates a new mock instance.
func NewMockAuthorizationServer(ctrl *gomock.Controller) *MockAuthorizationServer {
	mock := &MockAuthorizationServer{ctrl: ctrl}
	mock.recorder = &MockAuthorizationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationServer) EXPECT() *MockAuthorizationServerMockRecorder {
	return m.recorder
}

// AuthUser mocks base method.
func (m *MockAuthorizationServer) AuthUser(arg0 context.Context, arg1 *__auth_microservice.AuthRequest) (*__auth_microservice.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUser", arg0, arg1)
	ret0, _ := ret[0].(*__auth_microservice.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthUser indicates an expected call of AuthUser.
func (mr *MockAuthorizationServerMockRecorder) AuthUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUser", reflect.TypeOf((*MockAuthorizationServer)(nil).AuthUser), arg0, arg1)
}

// CheckAuth mocks base method.
func (m *MockAuthorizationServer) CheckAuth(arg0 context.Context, arg1 *__auth_microservice.CheckAuthRequest) (*__auth_microservice.CheckAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuth", arg0, arg1)
	ret0, _ := ret[0].(*__auth_microservice.CheckAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuth indicates an expected call of CheckAuth.
func (mr *MockAuthorizationServerMockRecorder) CheckAuth(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuth", reflect.TypeOf((*MockAuthorizationServer)(nil).CheckAuth), arg0, arg1)
}

// DeauthUser mocks base method.
func (m *MockAuthorizationServer) DeauthUser(arg0 context.Context, arg1 *__auth_microservice.DeauthRequest) (*__auth_microservice.DeauthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeauthUser", arg0, arg1)
	ret0, _ := ret[0].(*__auth_microservice.DeauthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeauthUser indicates an expected call of DeauthUser.
func (mr *MockAuthorizationServerMockRecorder) DeauthUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeauthUser", reflect.TypeOf((*MockAuthorizationServer)(nil).DeauthUser), arg0, arg1)
}

// mustEmbedUnimplementedAuthorizationServer mocks base method.
func (m *MockAuthorizationServer) mustEmbedUnimplementedAuthorizationServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthorizationServer")
}

// mustEmbedUnimplementedAuthorizationServer indicates an expected call of mustEmbedUnimplementedAuthorizationServer.
func (mr *MockAuthorizationServerMockRecorder) mustEmbedUnimplementedAuthorizationServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthorizationServer", reflect.TypeOf((*MockAuthorizationServer)(nil).mustEmbedUnimplementedAuthorizationServer))
}

// MockUnsafeAuthorizationServer is a mock of UnsafeAuthorizationServer interface.
type MockUnsafeAuthorizationServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAuthorizationServerMockRecorder
	isgomock struct{}
}

// MockUnsafeAuthorizationServerMockRecorder is the mock recorder for MockUnsafeAuthorizationServer.
type MockUnsafeAuthorizationServerMockRecorder struct {
	mock *MockUnsafeAuthorizationServer
}

// NewMockUnsafeAuthorizationServer creates a new mock instance.
func NewMockUnsafeAuthorizationServer(ctrl *gomock.Controller) *MockUnsafeAuthorizationServer {
	mock := &MockUnsafeAuthorizationServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAuthorizationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAuthorizationServer) EXPECT() *MockUnsafeAuthorizationServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAuthorizationServer mocks base method.
func (m *MockUnsafeAuthorizationServer) mustEmbedUnimplementedAuthorizationServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthorizationServer")
}

// mustEmbedUnimplementedAuthorizationServer indicates an expected call of mustEmbedUnimplementedAuthorizationServer.
func (mr *MockUnsafeAuthorizationServerMockRecorder) mustEmbedUnimplementedAuthorizationServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthorizationServer", reflect.TypeOf((*MockUnsafeAuthorizationServer)(nil).mustEmbedUnimplementedAuthorizationServer))
}
