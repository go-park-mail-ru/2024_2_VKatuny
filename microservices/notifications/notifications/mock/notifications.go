// Code generated by MockGen. DO NOT EDIT.
// Source: microservices/notifications/notifications/notifications.go
//
// Generated by this command:
//
//	mockgen -source=microservices/notifications/notifications/notifications.go -destination=microservices/notifications/notifications/mock/notifications.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	dto "github.com/go-park-mail-ru/2024_2_VKatuny/microservices/notifications/notifications/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockINotificationsRepository is a mock of INotificationsRepository interface.
type MockINotificationsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockINotificationsRepositoryMockRecorder
	isgomock struct{}
}

// MockINotificationsRepositoryMockRecorder is the mock recorder for MockINotificationsRepository.
type MockINotificationsRepositoryMockRecorder struct {
	mock *MockINotificationsRepository
}

// NewMockINotificationsRepository creates a new mock instance.
func NewMockINotificationsRepository(ctrl *gomock.Controller) *MockINotificationsRepository {
	mock := &MockINotificationsRepository{ctrl: ctrl}
	mock.recorder = &MockINotificationsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINotificationsRepository) EXPECT() *MockINotificationsRepositoryMockRecorder {
	return m.recorder
}

// CreateEmployerNotification mocks base method.
func (m *MockINotificationsRepository) CreateEmployerNotification(applicantID, employerID, vacancyID uint64, NotificationText string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployerNotification", applicantID, employerID, vacancyID, NotificationText)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEmployerNotification indicates an expected call of CreateEmployerNotification.
func (mr *MockINotificationsRepositoryMockRecorder) CreateEmployerNotification(applicantID, employerID, vacancyID, NotificationText any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployerNotification", reflect.TypeOf((*MockINotificationsRepository)(nil).CreateEmployerNotification), applicantID, employerID, vacancyID, NotificationText)
}

// GetAlEmployerNotifications mocks base method.
func (m *MockINotificationsRepository) GetAlEmployerNotifications(employerID uint64) ([]*dto.EmployerNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlEmployerNotifications", employerID)
	ret0, _ := ret[0].([]*dto.EmployerNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlEmployerNotifications indicates an expected call of GetAlEmployerNotifications.
func (mr *MockINotificationsRepositoryMockRecorder) GetAlEmployerNotifications(employerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlEmployerNotifications", reflect.TypeOf((*MockINotificationsRepository)(nil).GetAlEmployerNotifications), employerID)
}

// MakeEmployerNotificationRead mocks base method.
func (m *MockINotificationsRepository) MakeEmployerNotificationRead(notificationID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeEmployerNotificationRead", notificationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeEmployerNotificationRead indicates an expected call of MakeEmployerNotificationRead.
func (mr *MockINotificationsRepositoryMockRecorder) MakeEmployerNotificationRead(notificationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeEmployerNotificationRead", reflect.TypeOf((*MockINotificationsRepository)(nil).MakeEmployerNotificationRead), notificationID)
}

// MockINotificationsUsecase is a mock of INotificationsUsecase interface.
type MockINotificationsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockINotificationsUsecaseMockRecorder
	isgomock struct{}
}

// MockINotificationsUsecaseMockRecorder is the mock recorder for MockINotificationsUsecase.
type MockINotificationsUsecaseMockRecorder struct {
	mock *MockINotificationsUsecase
}

// NewMockINotificationsUsecase creates a new mock instance.
func NewMockINotificationsUsecase(ctrl *gomock.Controller) *MockINotificationsUsecase {
	mock := &MockINotificationsUsecase{ctrl: ctrl}
	mock.recorder = &MockINotificationsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINotificationsUsecase) EXPECT() *MockINotificationsUsecaseMockRecorder {
	return m.recorder
}

// CreateEmployerNotification mocks base method.
func (m *MockINotificationsUsecase) CreateEmployerNotification(applicantID, employerID, vacancyID uint64, applicantInfo, vacancyInfo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployerNotification", applicantID, employerID, vacancyID, applicantInfo, vacancyInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEmployerNotification indicates an expected call of CreateEmployerNotification.
func (mr *MockINotificationsUsecaseMockRecorder) CreateEmployerNotification(applicantID, employerID, vacancyID, applicantInfo, vacancyInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployerNotification", reflect.TypeOf((*MockINotificationsUsecase)(nil).CreateEmployerNotification), applicantID, employerID, vacancyID, applicantInfo, vacancyInfo)
}

// GetAlEmployerNotifications mocks base method.
func (m *MockINotificationsUsecase) GetAlEmployerNotifications(employerID uint64) ([]*dto.EmployerNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlEmployerNotifications", employerID)
	ret0, _ := ret[0].([]*dto.EmployerNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlEmployerNotifications indicates an expected call of GetAlEmployerNotifications.
func (mr *MockINotificationsUsecaseMockRecorder) GetAlEmployerNotifications(employerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlEmployerNotifications", reflect.TypeOf((*MockINotificationsUsecase)(nil).GetAlEmployerNotifications), employerID)
}

// MakeEmployerNotificationRead mocks base method.
func (m *MockINotificationsUsecase) MakeEmployerNotificationRead(notificationID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeEmployerNotificationRead", notificationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeEmployerNotificationRead indicates an expected call of MakeEmployerNotificationRead.
func (mr *MockINotificationsUsecaseMockRecorder) MakeEmployerNotificationRead(notificationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeEmployerNotificationRead", reflect.TypeOf((*MockINotificationsUsecase)(nil).MakeEmployerNotificationRead), notificationID)
}
