// Code generated by MockGen. DO NOT EDIT.
// Source: microservices/notifications/generated/notifications_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=microservices/notifications/generated/notifications_grpc.pb.go -destination=microservices/notifications/mock/mock_grpc.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	notificationsmicroservice "github.com/go-park-mail-ru/2024_2_VKatuny/microservices/notifications/generated"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockNotificationsServiceClient is a mock of NotificationsServiceClient interface.
type MockNotificationsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsServiceClientMockRecorder
	isgomock struct{}
}

// MockNotificationsServiceClientMockRecorder is the mock recorder for MockNotificationsServiceClient.
type MockNotificationsServiceClientMockRecorder struct {
	mock *MockNotificationsServiceClient
}

// NewMockNotificationsServiceClient creates a new mock instance.
func NewMockNotificationsServiceClient(ctrl *gomock.Controller) *MockNotificationsServiceClient {
	mock := &MockNotificationsServiceClient{ctrl: ctrl}
	mock.recorder = &MockNotificationsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationsServiceClient) EXPECT() *MockNotificationsServiceClientMockRecorder {
	return m.recorder
}

// CreateEmployerNotification mocks base method.
func (m *MockNotificationsServiceClient) CreateEmployerNotification(ctx context.Context, in *notificationsmicroservice.CreateEmployerNotificationInput, opts ...grpc.CallOption) (*notificationsmicroservice.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEmployerNotification", varargs...)
	ret0, _ := ret[0].(*notificationsmicroservice.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployerNotification indicates an expected call of CreateEmployerNotification.
func (mr *MockNotificationsServiceClientMockRecorder) CreateEmployerNotification(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployerNotification", reflect.TypeOf((*MockNotificationsServiceClient)(nil).CreateEmployerNotification), varargs...)
}

// MockNotificationsServiceServer is a mock of NotificationsServiceServer interface.
type MockNotificationsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsServiceServerMockRecorder
	isgomock struct{}
}

// MockNotificationsServiceServerMockRecorder is the mock recorder for MockNotificationsServiceServer.
type MockNotificationsServiceServerMockRecorder struct {
	mock *MockNotificationsServiceServer
}

// NewMockNotificationsServiceServer creates a new mock instance.
func NewMockNotificationsServiceServer(ctrl *gomock.Controller) *MockNotificationsServiceServer {
	mock := &MockNotificationsServiceServer{ctrl: ctrl}
	mock.recorder = &MockNotificationsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationsServiceServer) EXPECT() *MockNotificationsServiceServerMockRecorder {
	return m.recorder
}

// CreateEmployerNotification mocks base method.
func (m *MockNotificationsServiceServer) CreateEmployerNotification(arg0 context.Context, arg1 *notificationsmicroservice.CreateEmployerNotificationInput) (*notificationsmicroservice.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployerNotification", arg0, arg1)
	ret0, _ := ret[0].(*notificationsmicroservice.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployerNotification indicates an expected call of CreateEmployerNotification.
func (mr *MockNotificationsServiceServerMockRecorder) CreateEmployerNotification(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployerNotification", reflect.TypeOf((*MockNotificationsServiceServer)(nil).CreateEmployerNotification), arg0, arg1)
}

// mustEmbedUnimplementedNotificationsServiceServer mocks base method.
func (m *MockNotificationsServiceServer) mustEmbedUnimplementedNotificationsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedNotificationsServiceServer")
}

// mustEmbedUnimplementedNotificationsServiceServer indicates an expected call of mustEmbedUnimplementedNotificationsServiceServer.
func (mr *MockNotificationsServiceServerMockRecorder) mustEmbedUnimplementedNotificationsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedNotificationsServiceServer", reflect.TypeOf((*MockNotificationsServiceServer)(nil).mustEmbedUnimplementedNotificationsServiceServer))
}

// MockUnsafeNotificationsServiceServer is a mock of UnsafeNotificationsServiceServer interface.
type MockUnsafeNotificationsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeNotificationsServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeNotificationsServiceServerMockRecorder is the mock recorder for MockUnsafeNotificationsServiceServer.
type MockUnsafeNotificationsServiceServerMockRecorder struct {
	mock *MockUnsafeNotificationsServiceServer
}

// NewMockUnsafeNotificationsServiceServer creates a new mock instance.
func NewMockUnsafeNotificationsServiceServer(ctrl *gomock.Controller) *MockUnsafeNotificationsServiceServer {
	mock := &MockUnsafeNotificationsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeNotificationsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeNotificationsServiceServer) EXPECT() *MockUnsafeNotificationsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedNotificationsServiceServer mocks base method.
func (m *MockUnsafeNotificationsServiceServer) mustEmbedUnimplementedNotificationsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedNotificationsServiceServer")
}

// mustEmbedUnimplementedNotificationsServiceServer indicates an expected call of mustEmbedUnimplementedNotificationsServiceServer.
func (mr *MockUnsafeNotificationsServiceServerMockRecorder) mustEmbedUnimplementedNotificationsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedNotificationsServiceServer", reflect.TypeOf((*MockUnsafeNotificationsServiceServer)(nil).mustEmbedUnimplementedNotificationsServiceServer))
}
