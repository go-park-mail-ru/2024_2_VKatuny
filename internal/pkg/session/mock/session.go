// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/session/session.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	dto "github.com/go-park-mail-ru/2024_2_VKatuny/internal/pkg/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockISessionRepository is a mock of ISessionRepository interface.
type MockISessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISessionRepositoryMockRecorder
}

// MockISessionRepositoryMockRecorder is the mock recorder for MockISessionRepository.
type MockISessionRepositoryMockRecorder struct {
	mock *MockISessionRepository
}

// NewMockISessionRepository creates a new mock instance.
func NewMockISessionRepository(ctrl *gomock.Controller) *MockISessionRepository {
	mock := &MockISessionRepository{ctrl: ctrl}
	mock.recorder = &MockISessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISessionRepository) EXPECT() *MockISessionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockISessionRepository) Create(arg0 uint64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockISessionRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockISessionRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockISessionRepository) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockISessionRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockISessionRepository)(nil).Delete), arg0)
}

// GetUserIdBySession mocks base method.
func (m *MockISessionRepository) GetUserIdBySession(arg0 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdBySession", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdBySession indicates an expected call of GetUserIdBySession.
func (mr *MockISessionRepositoryMockRecorder) GetUserIdBySession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdBySession", reflect.TypeOf((*MockISessionRepository)(nil).GetUserIdBySession), arg0)
}

// MockISessionUsecase is a mock of ISessionUsecase interface.
type MockISessionUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockISessionUsecaseMockRecorder
}

// MockISessionUsecaseMockRecorder is the mock recorder for MockISessionUsecase.
type MockISessionUsecaseMockRecorder struct {
	mock *MockISessionUsecase
}

// NewMockISessionUsecase creates a new mock instance.
func NewMockISessionUsecase(ctrl *gomock.Controller) *MockISessionUsecase {
	mock := &MockISessionUsecase{ctrl: ctrl}
	mock.recorder = &MockISessionUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISessionUsecase) EXPECT() *MockISessionUsecaseMockRecorder {
	return m.recorder
}

// CheckAuthorization mocks base method.
func (m *MockISessionUsecase) CheckAuthorization(userType, sessionID string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthorization", userType, sessionID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuthorization indicates an expected call of CheckAuthorization.
func (mr *MockISessionUsecaseMockRecorder) CheckAuthorization(userType, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthorization", reflect.TypeOf((*MockISessionUsecase)(nil).CheckAuthorization), userType, sessionID)
}

// Login mocks base method.
func (m *MockISessionUsecase) Login(arg0 *dto.JSONLoginForm) (*dto.UserWithSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(*dto.UserWithSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockISessionUsecaseMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockISessionUsecase)(nil).Login), arg0)
}

// Logout mocks base method.
func (m *MockISessionUsecase) Logout(userType, sessionID string) (*dto.JSONUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", userType, sessionID)
	ret0, _ := ret[0].(*dto.JSONUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockISessionUsecaseMockRecorder) Logout(userType, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockISessionUsecase)(nil).Logout), userType, sessionID)
}
