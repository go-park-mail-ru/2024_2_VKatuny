// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/file_loading/file_loading.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/file_loading/file_loading.go -destination=internal/pkg/file_loading/mock/file_loading.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	multipart "mime/multipart"
	reflect "reflect"

	dto "github.com/go-park-mail-ru/2024_2_VKatuny/internal/pkg/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockIFileLoadingRepository is a mock of IFileLoadingRepository interface.
type MockIFileLoadingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIFileLoadingRepositoryMockRecorder
	isgomock struct{}
}

// MockIFileLoadingRepositoryMockRecorder is the mock recorder for MockIFileLoadingRepository.
type MockIFileLoadingRepositoryMockRecorder struct {
	mock *MockIFileLoadingRepository
}

// NewMockIFileLoadingRepository creates a new mock instance.
func NewMockIFileLoadingRepository(ctrl *gomock.Controller) *MockIFileLoadingRepository {
	mock := &MockIFileLoadingRepository{ctrl: ctrl}
	mock.recorder = &MockIFileLoadingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileLoadingRepository) EXPECT() *MockIFileLoadingRepositoryMockRecorder {
	return m.recorder
}

// CVtoPDF mocks base method.
func (m *MockIFileLoadingRepository) CVtoPDF(CV *dto.JSONCv, applicant *dto.JSONGetApplicantProfile) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CVtoPDF", CV, applicant)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CVtoPDF indicates an expected call of CVtoPDF.
func (mr *MockIFileLoadingRepositoryMockRecorder) CVtoPDF(CV, applicant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CVtoPDF", reflect.TypeOf((*MockIFileLoadingRepository)(nil).CVtoPDF), CV, applicant)
}

// WriteFileOnDisk mocks base method.
func (m *MockIFileLoadingRepository) WriteFileOnDisk(filename string, header *multipart.FileHeader, file multipart.File) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFileOnDisk", filename, header, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WriteFileOnDisk indicates an expected call of WriteFileOnDisk.
func (mr *MockIFileLoadingRepositoryMockRecorder) WriteFileOnDisk(filename, header, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFileOnDisk", reflect.TypeOf((*MockIFileLoadingRepository)(nil).WriteFileOnDisk), filename, header, file)
}

// MockIFileLoadingUsecase is a mock of IFileLoadingUsecase interface.
type MockIFileLoadingUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIFileLoadingUsecaseMockRecorder
	isgomock struct{}
}

// MockIFileLoadingUsecaseMockRecorder is the mock recorder for MockIFileLoadingUsecase.
type MockIFileLoadingUsecaseMockRecorder struct {
	mock *MockIFileLoadingUsecase
}

// NewMockIFileLoadingUsecase creates a new mock instance.
func NewMockIFileLoadingUsecase(ctrl *gomock.Controller) *MockIFileLoadingUsecase {
	mock := &MockIFileLoadingUsecase{ctrl: ctrl}
	mock.recorder = &MockIFileLoadingUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileLoadingUsecase) EXPECT() *MockIFileLoadingUsecaseMockRecorder {
	return m.recorder
}

// CVtoPDF mocks base method.
func (m *MockIFileLoadingUsecase) CVtoPDF(CV *dto.JSONCv, applicant *dto.JSONGetApplicantProfile) (*dto.CVPDFFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CVtoPDF", CV, applicant)
	ret0, _ := ret[0].(*dto.CVPDFFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CVtoPDF indicates an expected call of CVtoPDF.
func (mr *MockIFileLoadingUsecaseMockRecorder) CVtoPDF(CV, applicant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CVtoPDF", reflect.TypeOf((*MockIFileLoadingUsecase)(nil).CVtoPDF), CV, applicant)
}

// WriteImage mocks base method.
func (m *MockIFileLoadingUsecase) WriteImage(file multipart.File, header *multipart.FileHeader) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteImage", file, header)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WriteImage indicates an expected call of WriteImage.
func (mr *MockIFileLoadingUsecaseMockRecorder) WriteImage(file, header any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteImage", reflect.TypeOf((*MockIFileLoadingUsecase)(nil).WriteImage), file, header)
}
