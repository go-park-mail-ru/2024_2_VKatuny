// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/applicant/applicant.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/applicant/applicant.go -destination=internal/pkg/applicant/mock/applicant.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/go-park-mail-ru/2024_2_VKatuny/internal/pkg/dto"
	models "github.com/go-park-mail-ru/2024_2_VKatuny/internal/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockIApplicantRepository is a mock of IApplicantRepository interface.
type MockIApplicantRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIApplicantRepositoryMockRecorder
	isgomock struct{}
}

// MockIApplicantRepositoryMockRecorder is the mock recorder for MockIApplicantRepository.
type MockIApplicantRepositoryMockRecorder struct {
	mock *MockIApplicantRepository
}

// NewMockIApplicantRepository creates a new mock instance.
func NewMockIApplicantRepository(ctrl *gomock.Controller) *MockIApplicantRepository {
	mock := &MockIApplicantRepository{ctrl: ctrl}
	mock.recorder = &MockIApplicantRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIApplicantRepository) EXPECT() *MockIApplicantRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIApplicantRepository) Create(applicant *dto.ApplicantInput) (*models.Applicant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", applicant)
	ret0, _ := ret[0].(*models.Applicant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIApplicantRepositoryMockRecorder) Create(applicant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIApplicantRepository)(nil).Create), applicant)
}

// GetByEmail mocks base method.
func (m *MockIApplicantRepository) GetByEmail(email string) (*models.Applicant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*models.Applicant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockIApplicantRepositoryMockRecorder) GetByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockIApplicantRepository)(nil).GetByEmail), email)
}

// GetByID mocks base method.
func (m *MockIApplicantRepository) GetByID(ID uint64) (*models.Applicant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ID)
	ret0, _ := ret[0].(*models.Applicant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIApplicantRepositoryMockRecorder) GetByID(ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIApplicantRepository)(nil).GetByID), ID)
}

// Update mocks base method.
func (m *MockIApplicantRepository) Update(ID uint64, newApplicantData *dto.JSONUpdateApplicantProfile) (*models.Applicant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ID, newApplicantData)
	ret0, _ := ret[0].(*models.Applicant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIApplicantRepositoryMockRecorder) Update(ID, newApplicantData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIApplicantRepository)(nil).Update), ID, newApplicantData)
}

// MockIApplicantUsecase is a mock of IApplicantUsecase interface.
type MockIApplicantUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIApplicantUsecaseMockRecorder
	isgomock struct{}
}

// MockIApplicantUsecaseMockRecorder is the mock recorder for MockIApplicantUsecase.
type MockIApplicantUsecaseMockRecorder struct {
	mock *MockIApplicantUsecase
}

// NewMockIApplicantUsecase creates a new mock instance.
func NewMockIApplicantUsecase(ctrl *gomock.Controller) *MockIApplicantUsecase {
	mock := &MockIApplicantUsecase{ctrl: ctrl}
	mock.recorder = &MockIApplicantUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIApplicantUsecase) EXPECT() *MockIApplicantUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIApplicantUsecase) Create(ctx context.Context, applicant *dto.JSONApplicantRegistrationForm) (*dto.JSONUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, applicant)
	ret0, _ := ret[0].(*dto.JSONUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIApplicantUsecaseMockRecorder) Create(ctx, applicant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIApplicantUsecase)(nil).Create), ctx, applicant)
}

// GetApplicantProfile mocks base method.
func (m *MockIApplicantUsecase) GetApplicantProfile(ctx context.Context, userID uint64) (*dto.JSONGetApplicantProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicantProfile", ctx, userID)
	ret0, _ := ret[0].(*dto.JSONGetApplicantProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicantProfile indicates an expected call of GetApplicantProfile.
func (mr *MockIApplicantUsecaseMockRecorder) GetApplicantProfile(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicantProfile", reflect.TypeOf((*MockIApplicantUsecase)(nil).GetApplicantProfile), ctx, userID)
}

// GetByID mocks base method.
func (m *MockIApplicantUsecase) GetByID(ctx context.Context, ID uint64) (*dto.JSONApplicantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, ID)
	ret0, _ := ret[0].(*dto.JSONApplicantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIApplicantUsecaseMockRecorder) GetByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIApplicantUsecase)(nil).GetByID), ctx, ID)
}

// UpdateApplicantProfile mocks base method.
func (m *MockIApplicantUsecase) UpdateApplicantProfile(ctx context.Context, applicantID uint64, newProfileData *dto.JSONUpdateApplicantProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicantProfile", ctx, applicantID, newProfileData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApplicantProfile indicates an expected call of UpdateApplicantProfile.
func (mr *MockIApplicantUsecaseMockRecorder) UpdateApplicantProfile(ctx, applicantID, newProfileData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicantProfile", reflect.TypeOf((*MockIApplicantUsecase)(nil).UpdateApplicantProfile), ctx, applicantID, newProfileData)
}
