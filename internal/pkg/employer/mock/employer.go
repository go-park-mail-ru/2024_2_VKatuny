// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/employer/employer.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/employer/employer.go -destination=internal/pkg/employer/mock/employer.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/go-park-mail-ru/2024_2_VKatuny/internal/pkg/dto"
	models "github.com/go-park-mail-ru/2024_2_VKatuny/internal/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockIEmployerRepository is a mock of IEmployerRepository interface.
type MockIEmployerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIEmployerRepositoryMockRecorder
	isgomock struct{}
}

// MockIEmployerRepositoryMockRecorder is the mock recorder for MockIEmployerRepository.
type MockIEmployerRepositoryMockRecorder struct {
	mock *MockIEmployerRepository
}

// NewMockIEmployerRepository creates a new mock instance.
func NewMockIEmployerRepository(ctrl *gomock.Controller) *MockIEmployerRepository {
	mock := &MockIEmployerRepository{ctrl: ctrl}
	mock.recorder = &MockIEmployerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEmployerRepository) EXPECT() *MockIEmployerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIEmployerRepository) Create(arg0 *dto.EmployerInput) (*models.Employer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*models.Employer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIEmployerRepositoryMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIEmployerRepository)(nil).Create), arg0)
}

// GetByEmail mocks base method.
func (m *MockIEmployerRepository) GetByEmail(email string) (*models.Employer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*models.Employer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockIEmployerRepositoryMockRecorder) GetByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockIEmployerRepository)(nil).GetByEmail), email)
}

// GetByID mocks base method.
func (m *MockIEmployerRepository) GetByID(id uint64) (*models.Employer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Employer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIEmployerRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIEmployerRepository)(nil).GetByID), id)
}

// Update mocks base method.
func (m *MockIEmployerRepository) Update(ID uint64, newEmployerData *dto.JSONUpdateEmployerProfile) (*models.Employer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ID, newEmployerData)
	ret0, _ := ret[0].(*models.Employer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIEmployerRepositoryMockRecorder) Update(ID, newEmployerData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIEmployerRepository)(nil).Update), ID, newEmployerData)
}

// MockIEmployerUsecase is a mock of IEmployerUsecase interface.
type MockIEmployerUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIEmployerUsecaseMockRecorder
	isgomock struct{}
}

// MockIEmployerUsecaseMockRecorder is the mock recorder for MockIEmployerUsecase.
type MockIEmployerUsecaseMockRecorder struct {
	mock *MockIEmployerUsecase
}

// NewMockIEmployerUsecase creates a new mock instance.
func NewMockIEmployerUsecase(ctrl *gomock.Controller) *MockIEmployerUsecase {
	mock := &MockIEmployerUsecase{ctrl: ctrl}
	mock.recorder = &MockIEmployerUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEmployerUsecase) EXPECT() *MockIEmployerUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIEmployerUsecase) Create(ctx context.Context, form *dto.JSONEmployerRegistrationForm) (*dto.JSONUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, form)
	ret0, _ := ret[0].(*dto.JSONUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIEmployerUsecaseMockRecorder) Create(ctx, form any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIEmployerUsecase)(nil).Create), ctx, form)
}

// GetByID mocks base method.
func (m *MockIEmployerUsecase) GetByID(ctx context.Context, id uint64) (*dto.JSONEmployer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*dto.JSONEmployer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIEmployerUsecaseMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIEmployerUsecase)(nil).GetByID), ctx, id)
}

// GetEmployerProfile mocks base method.
func (m *MockIEmployerUsecase) GetEmployerProfile(ctx context.Context, employerID uint64) (*dto.JSONGetEmployerProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployerProfile", ctx, employerID)
	ret0, _ := ret[0].(*dto.JSONGetEmployerProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployerProfile indicates an expected call of GetEmployerProfile.
func (mr *MockIEmployerUsecaseMockRecorder) GetEmployerProfile(ctx, employerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployerProfile", reflect.TypeOf((*MockIEmployerUsecase)(nil).GetEmployerProfile), ctx, employerID)
}

// UpdateEmployerProfile mocks base method.
func (m *MockIEmployerUsecase) UpdateEmployerProfile(ctx context.Context, employerID uint64, employerProfile *dto.JSONUpdateEmployerProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployerProfile", ctx, employerID, employerProfile)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmployerProfile indicates an expected call of UpdateEmployerProfile.
func (mr *MockIEmployerUsecaseMockRecorder) UpdateEmployerProfile(ctx, employerID, employerProfile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployerProfile", reflect.TypeOf((*MockIEmployerUsecase)(nil).UpdateEmployerProfile), ctx, employerID, employerProfile)
}
