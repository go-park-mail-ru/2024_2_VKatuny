basePath: /api/v1
definitions:
  BD.UserInput:
    properties:
      login:
        type: string
      password:
        type: string
      userType:
        type: string
    type: object
  handler.badResponse:
    properties:
      error:
        type: string
      status:
        type: string
    type: object
host: 127.0.0.1:8000
info:
  contact:
    name: Ifelsik
    url: https://github.com/Ifelsik
  title: uArt's API
  version: "1.0"
paths:
  /authorized:
    post:
      description: Gets cookie from user and checks authentication
      parameters:
      - description: Session ID (Cookie)
        in: header
        name: session_id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Checks user's authorization
      tags:
      - AuthStatus
  /login/:
    post:
      consumes:
      - application/json
      description: '-'
      parameters:
      - description: User's email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: User's password
        in: body
        name: password
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Realises authentication
      tags:
      - Login
  /logout/:
    post:
      description: '-'
      parameters:
      - description: Session ID (Cookie)
        in: header
        name: session_id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      summary: Realises deauthentication
      tags:
      - Logout
  /registration/employer/:
    post:
      consumes:
      - application/json
      description: '-'
      parameters:
      - description: User's email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: User's password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/BD.UserInput'
        "400":
          description: Bad Request
      summary: Creates a new user as a employer
      tags:
      - Registration
  /registration/worker/:
    post:
      consumes:
      - application/json
      description: '-'
      parameters:
      - description: User's email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: User's password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/BD.UserInput'
        "400":
          description: Bad Request
      summary: Creates a new user as a worker
      tags:
      - Registration
  /vacancies:
    get:
      description: Accepts offset and number of vacancies with id >= offset. Returns
        vacancies
      parameters:
      - description: offset
        in: query
        name: offset
        required: true
        type: integer
      - description: num
        in: query
        name: num
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": 200, "vacancies": [{"id": 1, "position": "Продавец",
            "description": "Описание", "salary": "100", "employer": "Магазин", "location":
            "Tokyo", "createdAt": "2024.09.30 13:47:45"}]}'
          schema:
            type: object
        "400":
          description: '{"status": 400, "error": "num isn''t number"}'
          schema:
            $ref: '#/definitions/handler.badResponse'
        "405":
          description: '{"status": 405, "error": "http request method isn''t a GET"}'
          schema:
            $ref: '#/definitions/handler.badResponse'
        "500":
          description: '{"status": 500, "error": "encoding error"}'
          schema:
            $ref: '#/definitions/handler.badResponse'
      summary: Gets list of vacancies
      tags:
      - Vacancies
swagger: "2.0"
